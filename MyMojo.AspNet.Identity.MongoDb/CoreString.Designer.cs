//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyMojo.AspNet.Identity.MongoDb {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class CoreString {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal CoreString() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("FoodieSt.Web.Authentication.CoreString", typeof(CoreString).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The corresponding CLR type for entity type &apos;{entityType}&apos; is not instantiable and there is no derived entity type in the model that corresponds to a concrete CLR type..
        /// </summary>
        internal static string AbstractLeafEntityType {
            get {
                return ResourceManager.GetString("AbstractLeafEntityType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The child/dependent side could not be determined for the one-to-one relationship that was detected between &apos;{dependentToPrincipalNavigationSpecification}&apos; and &apos;{principalToDependentNavigationSpecification}&apos;. To identify the child/dependent side of the relationship, configure the foreign key property. See http://go.microsoft.com/fwlink/?LinkId=724062 for more details..
        /// </summary>
        internal static string AmbiguousOneToOneRelationship {
            get {
                return ResourceManager.GetString("AmbiguousOneToOneRelationship", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The annotation &apos;{annotation}&apos; was not found. Ensure that the annotation has been added..
        /// </summary>
        internal static string AnnotationNotFound {
            get {
                return ResourceManager.GetString("AnnotationNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The string argument &apos;{argumentName}&apos; cannot be empty..
        /// </summary>
        internal static string ArgumentIsEmpty {
            get {
                return ResourceManager.GetString("ArgumentIsEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property &apos;{property}&apos; of the argument &apos;{argument}&apos; cannot be null..
        /// </summary>
        internal static string ArgumentPropertyNull {
            get {
                return ResourceManager.GetString("ArgumentPropertyNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified field &apos;{field}&apos; of type &apos;{fieldType}&apos; cannot be used for the property &apos;{entityType}.{property}&apos; of type &apos;{propertyType}&apos;. Only backing fields of types that are assignable from the property type can be used..
        /// </summary>
        internal static string BadBackingFieldType {
            get {
                return ResourceManager.GetString("BadBackingFieldType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{givenType}&apos; cannot be used a a value generator because it does not inherit from &apos;{expectedType}&apos;..
        /// </summary>
        internal static string BadValueGeneratorType {
            get {
                return ResourceManager.GetString("BadValueGeneratorType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property &apos;{property}&apos; on entity type &apos;{entityType}&apos; cannot be marked as nullable/optional because the type of the property is &apos;{propertyType}&apos; which is not a nullable type. Any property can be marked as non-nullable/required, but only properties of nullable types and which are not part of primary key can be marked as nullable/optional..
        /// </summary>
        internal static string CannotBeNullable {
            get {
                return ResourceManager.GetString("CannotBeNullable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property &apos;{property}&apos; on entity type &apos;{entityType}&apos; cannot be marked as nullable/optional because the property is a part of a key. Any property can be marked as non-nullable/required, but only properties of nullable types and which are not part of a key can be marked as nullable/optional..
        /// </summary>
        internal static string CannotBeNullablePK {
            get {
                return ResourceManager.GetString("CannotBeNullablePK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create instance of value generator type &apos;{generatorType}&apos;. Ensure that the type is instantiable and has a parameterless constructor, or use the overload of HasValueGenerator that accepts a delegate..
        /// </summary>
        internal static string CannotCreateValueGenerator {
            get {
                return ResourceManager.GetString("CannotCreateValueGenerator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to create an instance of type entity type &apos;{entityType}&apos; because it is abstract. Either make it non-abstract or consider mapping at least one derived type..
        /// </summary>
        internal static string CannotMaterializeAbstractType {
            get {
                return ResourceManager.GetString("CannotMaterializeAbstractType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The entity type &apos;{entityType}&apos; is configured to use the &apos;{changeTrackingStrategy}&apos; change tracking strategy but does not implement the required &apos;{notificationInterface}&apos; interface..
        /// </summary>
        internal static string ChangeTrackingInterfaceMissing {
            get {
                return ResourceManager.GetString("ChangeTrackingInterfaceMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to save changes because a circular dependency was detected in the data to be saved: &apos;{cycle}&apos;..
        /// </summary>
        internal static string CircularDependency {
            get {
                return ResourceManager.GetString("CircularDependency", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The entity type &apos;{entityType}&apos; cannot inherit from &apos;{baseEntityType}&apos; because &apos;{baseEntityType}&apos; is a descendent of &apos;{entityType}&apos;..
        /// </summary>
        internal static string CircularInheritance {
            get {
                return ResourceManager.GetString("CircularInheritance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property &apos;{property}&apos; cannot exist on entity type &apos;{entityType}&apos; because the entity type is marked as shadow state while the property is not. Shadow state entity types can only contain shadow state properties..
        /// </summary>
        internal static string ClrPropertyOnShadowEntity {
            get {
                return ResourceManager.GetString("ClrPropertyOnShadowEntity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The collection argument &apos;{argumentName}&apos; must contain at least one element..
        /// </summary>
        internal static string CollectionArgumentIsEmpty {
            get {
                return ResourceManager.GetString("CollectionArgumentIsEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property &apos;{property}&apos; on entity type &apos;{entityType}&apos; is being accessed using the &apos;{CollectionMethod}&apos; method, but is defined in the model as a non-collection, reference navigation property. Use the &apos;{ReferenceMethod}&apos; method to access reference navigation properties..
        /// </summary>
        internal static string CollectionIsReference {
            get {
                return ResourceManager.GetString("CollectionIsReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are multiple properties pointing to navigation &apos;{navigation}&apos; in entity type &apos;{entityType}&apos;. To define composite foreign key using data annotations, use ForeignKeyAttribute on navigation..
        /// </summary>
        internal static string CompositeFkOnProperty {
            get {
                return ResourceManager.GetString("CompositeFkOnProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Entity type &apos;{entityType}&apos; has composite primary key defined with data annotations. To set composite primary key, use fluent API..
        /// </summary>
        internal static string CompositePKWithDataAnnotation {
            get {
                return ResourceManager.GetString("CompositePKWithDataAnnotation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A second operation started on this context before a previous operation completed. Any instance members are not guaranteed to be thread safe..
        /// </summary>
        internal static string ConcurrentMethodInvocation {
            get {
                return ResourceManager.GetString("ConcurrentMethodInvocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property &apos;{property}&apos; cannot be added to the entity type &apos;{entityType}&apos; because a navigation property with the same name already exists on entity type &apos;{duplicateEntityType}&apos;..
        /// </summary>
        internal static string ConflictingNavigation {
            get {
                return ResourceManager.GetString("ConflictingNavigation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The navigation property &apos;{navigation}&apos; cannot be added to the entity type &apos;{entityType}&apos; because a property with the same name already exists on entity type &apos;{duplicateEntityType}&apos;..
        /// </summary>
        internal static string ConflictingProperty {
            get {
                return ResourceManager.GetString("ConflictingProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create a relationship between &apos;{newPrincipalEntityType}.{newPrincipalNavigation}&apos; and &apos;{newDependentEntityType}.{newDependentNavigation}&apos;, because there already is a relationship between &apos;{existingPrincipalEntityType}.{existingPrincipalNavigation}&apos; and &apos;{existingDependentEntityType}.{existingDependentNavigation}&apos;. Navigation properties can only participate in a single relationship..
        /// </summary>
        internal static string ConflictingRelationshipNavigation {
            get {
                return ResourceManager.GetString("ConflictingRelationshipNavigation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances..
        /// </summary>
        internal static string ContextDisposed {
            get {
                return ResourceManager.GetString("ContextDisposed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The extension method ‘{method}’ is being used with a custom implementation of ‘{interfaceType}’. Use of custom implementations of the Entity Framework metadata interfaces is not supported. Consider deriving from ‘{concreteType}’ instead. Please contact the Entity Framework team if you have a compelling case for a custom implementation of the metadata interfaces so that we can consider ways to achieve this..
        /// </summary>
        internal static string CustomMetadata {
            get {
                return ResourceManager.GetString("CustomMetadata", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The database generated a null value for non-nullable property &apos;{property}&apos; of entity type &apos;{entityType}&apos;. Ensure value generation configuration in the database matches the configuration in the model..
        /// </summary>
        internal static string DatabaseGeneratedNull {
            get {
                return ResourceManager.GetString("DatabaseGeneratedNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data binding directly to a store query is not supported. Instead materialize the results into a collection, by calling a method such as ToList() or ToArray(), and bind to the collection. This should be done to avoid sending a query to the database each time the databound control iterates the data..
        /// </summary>
        internal static string DataBindingWithIListSource {
            get {
                return ResourceManager.GetString("DataBindingWithIListSource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You are configuring a relationship between &apos;{dependentEntityType}&apos; and &apos;{principalEntityType}&apos; but have specified a foreign key on &apos;{entityType}&apos;. The foreign key must be defined on a type that is part of the relationship..
        /// </summary>
        internal static string DependentEntityTypeNotInRelationship {
            get {
                return ResourceManager.GetString("DependentEntityTypeNotInRelationship", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to set a base type for entity type &apos;{entityType}&apos; because it has one or more keys defined..
        /// </summary>
        internal static string DerivedEntityCannotHaveKeys {
            get {
                return ResourceManager.GetString("DerivedEntityCannotHaveKeys", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A key cannot be configured on &apos;{derivedType}&apos; because it is a derived type. The key must be configured on the root type &apos;{rootType}&apos;. If you did not intend for &apos;{rootType}&apos; to be included in the model, ensure that it is not included in a DbSet property on your context, referenced in a configuration call to ModelBuilder, or referenced from a navigation property on a type that is included in the model..
        /// </summary>
        internal static string DerivedEntityTypeKey {
            get {
                return ResourceManager.GetString("DerivedEntityTypeKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The annotation &apos;{annotation}&apos; cannot be added because an annotation with the same name already exists..
        /// </summary>
        internal static string DuplicateAnnotation {
            get {
                return ResourceManager.GetString("DuplicateAnnotation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The entity type &apos;{entityType}&apos; cannot be added to the model because an entity with the same name already exists..
        /// </summary>
        internal static string DuplicateEntityType {
            get {
                return ResourceManager.GetString("DuplicateEntityType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The foreign key {foreignKey} cannot be added to the entity type &apos;{entityType}&apos; because a foreign key on the same properties already exists on entity type &apos;{duplicateEntityType}&apos; and also targets the key {key} on &apos;{principalType}&apos;..
        /// </summary>
        internal static string DuplicateForeignKey {
            get {
                return ResourceManager.GetString("DuplicateForeignKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The index {index} cannot be added to the entity type &apos;{entityType}&apos; because an index on the same properties already exists on entity type &apos;{duplicateEntityType}&apos;..
        /// </summary>
        internal static string DuplicateIndex {
            get {
                return ResourceManager.GetString("DuplicateIndex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The key {key} cannot be added to the entity type &apos;{entityType}&apos; because a key on the same properties already exists on entity type &apos;{duplicateEntityType}&apos;..
        /// </summary>
        internal static string DuplicateKey {
            get {
                return ResourceManager.GetString("DuplicateKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The navigation property &apos;{navigation}&apos; cannot be added to the entity type &apos;{entityType}&apos; because a navigation property with the same name already exists on entity type &apos;{duplicateEntityType}&apos;..
        /// </summary>
        internal static string DuplicateNavigation {
            get {
                return ResourceManager.GetString("DuplicateNavigation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{entityType}&apos; cannot have base type &apos;{baseType}&apos; because both types include the navigations: {navigations}..
        /// </summary>
        internal static string DuplicateNavigationsOnBase {
            get {
                return ResourceManager.GetString("DuplicateNavigationsOnBase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{entityType}&apos; cannot have base type &apos;{baseType}&apos; because both types include the properties: {properties}..
        /// </summary>
        internal static string DuplicatePropertiesOnBase {
            get {
                return ResourceManager.GetString("DuplicatePropertiesOnBase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property &apos;{property}&apos; cannot be added to the entity type &apos;{entityType}&apos; because a property with the same name already exists on entity type &apos;{duplicateEntityType}&apos;..
        /// </summary>
        internal static string DuplicateProperty {
            get {
                return ResourceManager.GetString("DuplicateProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The entity type &apos;{entityType}&apos; requires a primary key to be defined..
        /// </summary>
        internal static string EntityRequiresKey {
            get {
                return ResourceManager.GetString("EntityRequiresKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The entity type &apos;{entityType}&apos; cannot be removed because &apos;{derivedEntityType}&apos; is derived from it. All derived entity types must be removed or redefined before the entity type can be removed..
        /// </summary>
        internal static string EntityTypeInUseByDerived {
            get {
                return ResourceManager.GetString("EntityTypeInUseByDerived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The entity type &apos;{entityType}&apos; cannot be removed because it is being referenced by foreign key {foreignKey} on &apos;{referencingEntityType}&apos;. All referencing foreign keys must be removed or redefined before the entity type can be removed..
        /// </summary>
        internal static string EntityTypeInUseByForeignKey {
            get {
                return ResourceManager.GetString("EntityTypeInUseByForeignKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The entity types &apos;{firstEntityType}&apos; and &apos;{secondEntityType}&apos; do not belong to the same model..
        /// </summary>
        internal static string EntityTypeModelMismatch {
            get {
                return ResourceManager.GetString("EntityTypeModelMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The entity type &apos;{entityType}&apos; was not found. Ensure that the entity type has been added to the model..
        /// </summary>
        internal static string EntityTypeNotFound {
            get {
                return ResourceManager.GetString("EntityTypeNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified entity type &apos;{entityType}&apos; is invalid. It should be either the dependent entity type &apos;{dependentType}&apos; or the principal entity type &apos;{principalType}&apos; or an entity type derived from one of them..
        /// </summary>
        internal static string EntityTypeNotInRelationship {
            get {
                return ResourceManager.GetString("EntityTypeNotInRelationship", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified entity type &apos;{entityType}&apos; is invalid. It should be either the dependent entity type &apos;{dependentType}&apos; or the principal entity type &apos;{principalType}&apos;..
        /// </summary>
        internal static string EntityTypeNotInRelationshipStrict {
            get {
                return ResourceManager.GetString("EntityTypeNotInRelationshipStrict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified entity types &apos;{invalidDependentType}&apos; and &apos;{invalidPrincipalType}&apos; are invalid. They should be &apos;{dependentType}&apos; and &apos;{principalType}&apos; or entity types in the same hierarchy..
        /// </summary>
        internal static string EntityTypesNotInRelationship {
            get {
                return ResourceManager.GetString("EntityTypesNotInRelationship", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception occured while reading a database value for property &apos;{entityType}.{property}&apos;. See the inner exception for more information..
        /// </summary>
        internal static string ErrorMaterializingProperty {
            get {
                return ResourceManager.GetString("ErrorMaterializingProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception occured while reading a database value for property &apos;{entityType}.{property}&apos;. The expected type was &apos;{expectedType}&apos; but the actual value was of type &apos;{actualType}&apos;..
        /// </summary>
        internal static string ErrorMaterializingPropertyInvalidCast {
            get {
                return ResourceManager.GetString("ErrorMaterializingPropertyInvalidCast", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception occured while reading a database value for property &apos;{entityType}.{property}&apos;. The expected type was &apos;{expectedType}&apos; but the actual value was null..
        /// </summary>
        internal static string ErrorMaterializingPropertyNullReference {
            get {
                return ResourceManager.GetString("ErrorMaterializingPropertyNullReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception occured while reading a database value. See the inner exception for more information..
        /// </summary>
        internal static string ErrorMaterializingValue {
            get {
                return ResourceManager.GetString("ErrorMaterializingValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception occured while reading a database value. The expected type was &apos;{expectedType}&apos; but the actual value was of type &apos;{actualType}&apos;..
        /// </summary>
        internal static string ErrorMaterializingValueInvalidCast {
            get {
                return ResourceManager.GetString("ErrorMaterializingValueInvalidCast", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception occured while reading a database value. The expected type was &apos;{expectedType}&apos; but the actual value was null..
        /// </summary>
        internal static string ErrorMaterializingValueNullReference {
            get {
                return ResourceManager.GetString("ErrorMaterializingValueNullReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception was thrown while attempting to evaluate a LINQ query parameter expression. To show additional information call EnableSensitiveDataLogging() when overriding DbContext.OnConfiguring..
        /// </summary>
        internal static string ExpressionParameterizationException {
            get {
                return ResourceManager.GetString("ExpressionParameterizationException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception was thrown while attempting to evaluate the LINQ query parameter expression &apos;{expression}&apos;..
        /// </summary>
        internal static string ExpressionParameterizationExceptionSensitive {
            get {
                return ResourceManager.GetString("ExpressionParameterizationExceptionSensitive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Entity type &apos;{entityType}&apos; is defined with a single key property, but {valuesCount} values were passed to the &apos;DbSet.Find&apos; method..
        /// </summary>
        internal static string FindNotCompositeKey {
            get {
                return ResourceManager.GetString("FindNotCompositeKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Entity type &apos;{entityType}&apos; is defined with a {propertiesCount}-part composite key, but {valuesCount} values were passed to the &apos;DbSet.Find&apos; method..
        /// </summary>
        internal static string FindValueCountMismatch {
            get {
                return ResourceManager.GetString("FindValueCountMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The key value at position {index} of the call to &apos;DbSet&lt;{entityType}&gt;.Find&apos; was of type &apos;{valueType}&apos;, which does not match the property type of &apos;{propertyType}&apos;..
        /// </summary>
        internal static string FindValueTypeMismatch {
            get {
                return ResourceManager.GetString("FindValueTypeMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ForeignKeyAttributes on property &apos;{property}&apos; and navigation &apos;{navigation}&apos; in entity type &apos;{entityType}&apos; do not point at each other. The value of ForeignKeyAttribute on property should be navigation name and the value of ForeignKeyAttribute on navigation should be the foreign key property name..
        /// </summary>
        internal static string FkAttributeOnPropertyNavigationMismatch {
            get {
                return ResourceManager.GetString("FkAttributeOnPropertyNavigationMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The foreign key {foreignKey} on entity type &apos;{entityType}&apos; cannot be marked as optional because it does not contain any property of a nullable type. Any foreign key can be marked as required, but only foreign keys with at least one property of a nullable type and which is not part of primary key can be marked as optional..
        /// </summary>
        internal static string ForeignKeyCannotBeOptional {
            get {
                return ResourceManager.GetString("ForeignKeyCannotBeOptional", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of properties specified for the foreign key {foreignKey} on entity type &apos;{dependentType}&apos; does not match the number of properties in the principal key {principalKey} on entity type &apos;{principalType}&apos;..
        /// </summary>
        internal static string ForeignKeyCountMismatch {
            get {
                return ResourceManager.GetString("ForeignKeyCountMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified foreign key properties {foreignKey} are not declared on the entity type &apos;{entityType}&apos;. Ensure foreign key properties are declared on the target entity type..
        /// </summary>
        internal static string ForeignKeyPropertiesWrongEntity {
            get {
                return ResourceManager.GetString("ForeignKeyPropertiesWrongEntity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property &apos;{property}&apos; cannot be part of a foreign key on &apos;{entityType}&apos; because it is contained in a key defined on a base entity type..
        /// </summary>
        internal static string ForeignKeyPropertyInKey {
            get {
                return ResourceManager.GetString("ForeignKeyPropertyInKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided principal entity key &apos;{principalKey}&apos; is not a key on the entity type &apos;{principalEntityType}&apos;..
        /// </summary>
        internal static string ForeignKeyReferencedEntityKeyMismatch {
            get {
                return ResourceManager.GetString("ForeignKeyReferencedEntityKeyMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The types of the properties specified for the foreign key {foreignKey} on entity type &apos;{dependentType}&apos; do not match the types of the properties in the principal key {principalKey} on entity type &apos;{principalType}&apos;..
        /// </summary>
        internal static string ForeignKeyTypeMismatch {
            get {
                return ResourceManager.GetString("ForeignKeyTypeMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The edge cannot be added because the graph does not contain vertex &apos;{vertex}&apos;..
        /// </summary>
        internal static string GraphDoesNotContainVertex {
            get {
                return ResourceManager.GetString("GraphDoesNotContainVertex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The block size used for Hi-Lo value generation must be positive. When the Hi-Lo generator is backed by a SQL sequence this means that the sequence increment must be positive..
        /// </summary>
        internal static string HiLoBadBlockSize {
            get {
                return ResourceManager.GetString("HiLoBadBlockSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The instance of entity type &apos;{entityType}&apos; cannot be tracked because another instance of this type with the same key is already being tracked. When adding new entities, for most key types a unique temporary key value will be created if no key is set (i.e. if the key property is assigned the default value for its type). If you are explicitly setting key values for new entities, ensure they do not collide with existing entities or temporary values generated for other new entities. When attaching existing enti [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string IdentityConflict {
            get {
                return ResourceManager.GetString("IdentityConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The expression &apos;{expression}&apos; passed to the Include operator could not be bound..
        /// </summary>
        internal static string IncludeNonBindableExpression {
            get {
                return ResourceManager.GetString("IncludeNonBindableExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Include operator is not implemented by the current database provider..
        /// </summary>
        internal static string IncludeNotImplemented {
            get {
                return ResourceManager.GetString("IncludeNotImplemented", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The entity type &apos;{entityType}&apos; should derive from &apos;{baseEntityType}&apos; to reflect the hierarchy of the corresponding CLR types..
        /// </summary>
        internal static string InconsistentInheritance {
            get {
                return ResourceManager.GetString("InconsistentInheritance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified index properties {index} are not declared on the entity type &apos;{entityType}&apos;. Ensure index properties are declared on the target entity type..
        /// </summary>
        internal static string IndexPropertiesWrongEntity {
            get {
                return ResourceManager.GetString("IndexPropertiesWrongEntity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property &apos;{property}&apos; cannot be ignored on entity type &apos;{entityType}&apos;, because it&apos;s declared on the base entity type &apos;{baseEntityType}&apos;. To exclude this property from your model, use NotMappedAttribute or Ignore method on the base type..
        /// </summary>
        internal static string InheritedPropertyCannotBeIgnored {
            get {
                return ResourceManager.GetString("InheritedPropertyCannotBeIgnored", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property &apos;{entityType}.{navigation}&apos; is of an interface type (&apos;{propertyType}&apos;). If it is a navigation property manually configure the relationship for this property by casting it to a mapped entity type, otherwise ignore the property from the model..
        /// </summary>
        internal static string InterfacePropertyNotAdded {
            get {
                return ResourceManager.GetString("InterfacePropertyNotAdded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The entity type related to &apos;{entityType}&apos; cannot be determined because the specified foreign key {foreignKey} references entity type &apos;{principalEntityType}&apos; that it is in the same hierarchy as the entity type that it is declared on &apos;{dependentEntityType}&apos;..
        /// </summary>
        internal static string IntraHierarchicalAmbiguousTargetEntityType {
            get {
                return ResourceManager.GetString("IntraHierarchicalAmbiguousTargetEntityType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property expression &apos;{propertyAccessExpression}&apos; is not valid. The expression should represent a property access: &apos;t =&gt; t.MyProperty&apos;. For more information on including related data, see http://go.microsoft.com/fwlink/?LinkID=746393..
        /// </summary>
        internal static string InvalidComplexPropertyExpression {
            get {
                return ResourceManager.GetString("InvalidComplexPropertyExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The entity type &apos;{type}&apos; provided for the argument &apos;{argumentName}&apos; must be a reference type..
        /// </summary>
        internal static string InvalidEntityType {
            get {
                return ResourceManager.GetString("InvalidEntityType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value provided for argument &apos;{argumentName}&apos; must be a valid value of enum type &apos;{enumType}&apos;..
        /// </summary>
        internal static string InvalidEnumValue {
            get {
                return ResourceManager.GetString("InvalidEnumValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to create or track an entity of type &apos;{entityType}&apos; because it has a null primary or alternate key value..
        /// </summary>
        internal static string InvalidKeyValue {
            get {
                return ResourceManager.GetString("InvalidKeyValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unhandled operation: MemberInitExpression binding is not a MemberAssignment.
        /// </summary>
        internal static string InvalidMemberInitBinding {
            get {
                return ResourceManager.GetString("InvalidMemberInitBinding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The InversePropertyAttribute on property &apos;{property}&apos; on type &apos;{entityType}&apos; is not valid. The property &apos;{referencedProperty}&apos; is not a valid navigation property on the related type &apos;{referencedEntityType}&apos;. Ensure that the property exists and is a valid reference or collection navigation property..
        /// </summary>
        internal static string InvalidNavigationWithInverseProperty {
            get {
                return ResourceManager.GetString("InvalidNavigationWithInverseProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The properties expression &apos;{expression}&apos; is not valid. The expression should represent a property access: &apos;t =&gt; t.MyProperty&apos;. When specifying multiple properties use an anonymous type: &apos;t =&gt; new {{ t.MyProperty1, t.MyProperty2 }}&apos;..
        /// </summary>
        internal static string InvalidPropertiesExpression {
            get {
                return ResourceManager.GetString("InvalidPropertiesExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The expression &apos;{expression}&apos; is not a valid property expression. The expression should represent a property access: &apos;t =&gt; t.MyProperty&apos;..
        /// </summary>
        internal static string InvalidPropertyExpression {
            get {
                return ResourceManager.GetString("InvalidPropertyExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property list specified using ForeignKeyAttribute on navigation &apos;{navigation}&apos; in entity type &apos;{entityType}&apos; is incorrect. The attribute value should be comma-separated list of property names..
        /// </summary>
        internal static string InvalidPropertyListOnNavigation {
            get {
                return ResourceManager.GetString("InvalidPropertyListOnNavigation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid relationship has been specified using InverseProperty and ForeignKey. The navigation &apos;{navigation}&apos; in entity type &apos;{entityType}&apos; and the navigation &apos;{referencedNavigation}&apos; in entity type &apos;{referencedEntityType}&apos; are related by InversePropertyAttribute but the ForeignKeyAttribute specified for both navigations have different values..
        /// </summary>
        internal static string InvalidRelationshipUsingDataAnnotations {
            get {
                return ResourceManager.GetString("InvalidRelationshipUsingDataAnnotations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A call was made to {replaceService}, but Entity Framework is not building its own internal service provider. Either allow EF to build the service provider by removing the call to {useInternalServiceProvider}, or build replacement services into the service provider before passing it to {useInternalServiceProvider}..
        /// </summary>
        internal static string InvalidReplaceService {
            get {
                return ResourceManager.GetString("InvalidReplaceService", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create a DbSet for &apos;{typeName}&apos; because this type is not included in the model for the context..
        /// </summary>
        internal static string InvalidSetType {
            get {
                return ResourceManager.GetString("InvalidSetType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value for property &apos;{property}&apos; of entity type &apos;{entityType}&apos; cannot be set to a value of type &apos;{valueType}&apos; because its type is &apos;{propertyType}&apos;..
        /// </summary>
        internal static string InvalidType {
            get {
                return ResourceManager.GetString("InvalidType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{factory}&apos; cannot create a value generator for property &apos;{property}&apos; on entity type &apos;{entityType}&apos;. Only integer properties are supported..
        /// </summary>
        internal static string InvalidValueGeneratorFactoryProperty {
            get {
                return ResourceManager.GetString("InvalidValueGeneratorFactoryProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to InversePropertyAttributes on navigation &apos;{navigation}&apos; in entity type &apos;{entityType}&apos; and on navigation &apos;{referencedNavigation}&apos; in entity type &apos;{referencedEntityType}&apos; are not pointing to each other..
        /// </summary>
        internal static string InversePropertyMismatch {
            get {
                return ResourceManager.GetString("InversePropertyMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The source IQueryable doesn&apos;t implement IAsyncEnumerable&lt;{genericParameter}&gt;. Only sources that implement IAsyncEnumerable can be used for Entity Framework asynchronous operations..
        /// </summary>
        internal static string IQueryableNotAsync {
            get {
                return ResourceManager.GetString("IQueryableNotAsync", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provider for the source IQueryable doesn&apos;t implement IAsyncQueryProvider. Only providers that implement IEntityQueryProvider can be used for Entity Framework asynchronous operations..
        /// </summary>
        internal static string IQueryableProviderNotAsync {
            get {
                return ResourceManager.GetString("IQueryableProviderNotAsync", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The derived type &apos;{derivedType}&apos; cannot have KeyAttribute on property &apos;{property}&apos; since primary key can only be declared on the root type..
        /// </summary>
        internal static string KeyAttributeOnDerivedEntity {
            get {
                return ResourceManager.GetString("KeyAttributeOnDerivedEntity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot remove key {key} from entity type &apos;{entityType}&apos; because it is referenced by a foreign key in entity type &apos;{dependentType}&apos;. All foreign keys must be removed or redefined before the referenced key can be removed..
        /// </summary>
        internal static string KeyInUse {
            get {
                return ResourceManager.GetString("KeyInUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified key properties {key} are not declared on the entity type &apos;{entityType}&apos;. Ensure key properties are declared on the target entity type..
        /// </summary>
        internal static string KeyPropertiesWrongEntity {
            get {
                return ResourceManager.GetString("KeyPropertiesWrongEntity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property &apos;{property}&apos; cannot be part of a key on &apos;{entityType}&apos; because it is contained in a foreign key defined on a derived entity type..
        /// </summary>
        internal static string KeyPropertyInForeignKey {
            get {
                return ResourceManager.GetString("KeyPropertyInForeignKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property &apos;{property}&apos; on entity type &apos;{entityType}&apos; must be marked as read-only after it has been saved because it is part of a key. Key properties are always read-only once an entity has been saved for the first time..
        /// </summary>
        internal static string KeyPropertyMustBeReadOnly {
            get {
                return ResourceManager.GetString("KeyPropertyMustBeReadOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property &apos;{property}&apos; on entity type &apos;{entityType}&apos; is part of a key and so cannot be modified or marked as modified..
        /// </summary>
        internal static string KeyReadOnly {
            get {
                return ResourceManager.GetString("KeyReadOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Compiling query model: &apos;{queryModel}&apos;.
        /// </summary>
        internal static string LogCompilingQueryModel {
            get {
                return ResourceManager.GetString("LogCompilingQueryModel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception occurred in the database while iterating the results of a query.{newline}{error}.
        /// </summary>
        internal static string LogExceptionDuringQueryIteration {
            get {
                return ResourceManager.GetString("LogExceptionDuringQueryIteration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception occurred in the database while saving changes.{newline}{error}.
        /// </summary>
        internal static string LogExceptionDuringSaveChanges {
            get {
                return ResourceManager.GetString("LogExceptionDuringSaveChanges", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Include operation for navigation: &apos;{navigation}&apos; was ignored because the target navigation is not reachable in the final query results..
        /// </summary>
        internal static string LogIgnoredInclude {
            get {
                return ResourceManager.GetString("LogIgnoredInclude", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Including navigation: &apos;{navigation}&apos;.
        /// </summary>
        internal static string LogIncludingNavigation {
            get {
                return ResourceManager.GetString("LogIncludingNavigation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Optimized query model: &apos;{queryModel}&apos;.
        /// </summary>
        internal static string LogOptimizedQueryModel {
            get {
                return ResourceManager.GetString("LogOptimizedQueryModel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified field &apos;{field}&apos; could not be found for property &apos;{property}&apos; on entity type &apos;{entityType}&apos;..
        /// </summary>
        internal static string MissingBackingField {
            get {
                return ResourceManager.GetString("MissingBackingField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sequence contains more than one element.
        /// </summary>
        internal static string MoreThanOneElement {
            get {
                return ResourceManager.GetString("MoreThanOneElement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot start tracking InternalEntityEntry for entity type &apos;{entityType}&apos; because another InternalEntityEntry is already tracking the same entity..
        /// </summary>
        internal static string MultipleEntries {
            get {
                return ResourceManager.GetString("MultipleEntries", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are multiple navigations in entity type &apos;{entityType}&apos; which are pointing to same set of properties - &apos;{propertyList}&apos; using ForeignKeyAttribute..
        /// </summary>
        internal static string MultipleNavigationsSameFk {
            get {
                return ResourceManager.GetString("MultipleNavigationsSameFk", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The database providers {storeNames}are available. A context can only be configured to use a single database provider. Configure a database provider by overriding OnConfiguring in your DbContext class or in the AddDbContext method when setting up services..
        /// </summary>
        internal static string MultipleProvidersAvailable {
            get {
                return ResourceManager.GetString("MultipleProvidersAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The database providers {storeNames}are configured. A context can only be configured to use a single database provider..
        /// </summary>
        internal static string MultipleProvidersConfigured {
            get {
                return ResourceManager.GetString("MultipleProvidersConfigured", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type of navigation property &apos;{navigation}&apos; on the entity type &apos;{entityType}&apos; is &apos;{foundType}&apos; which is an array type.. Collection navigation properties cannot be arrays..
        /// </summary>
        internal static string NavigationArray {
            get {
                return ResourceManager.GetString("NavigationArray", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type of navigation property &apos;{navigation}&apos; on the entity type &apos;{entityType}&apos; is &apos;{foundType}&apos; which does not implement ICollection&lt;{targetType}&gt;. Collection navigation properties must implement ICollection&lt;&gt; of the target type..
        /// </summary>
        internal static string NavigationBadType {
            get {
                return ResourceManager.GetString("NavigationBadType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type of navigation property &apos;{navigation}&apos; on the entity type &apos;{entityType}&apos; is &apos;{foundType}&apos; for which it was not possible to create a concrete instance. Either initialize the property before use, add a public parameterless constructor to the type, or use a type which can be assigned a HashSet&lt;&gt; or List&lt;&gt;..
        /// </summary>
        internal static string NavigationCannotCreateType {
            get {
                return ResourceManager.GetString("NavigationCannotCreateType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The collection navigation property &apos;{navigation}&apos; cannot be added to the entity type &apos;{entityType}&apos; because its CLR type &apos;{clrType}&apos; does not implement &apos;IEnumerable&lt;{targetType}&gt;&apos;. Collection navigation properties must implement IEnumerable&lt;&gt; of the related entity..
        /// </summary>
        internal static string NavigationCollectionWrongClrType {
            get {
                return ResourceManager.GetString("NavigationCollectionWrongClrType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The navigation property &apos;{navigation}&apos; on entity type &apos;{entityType}&apos; cannot be associated with foreign key {targetFk} because it was created for foreign key {actualFk}..
        /// </summary>
        internal static string NavigationForWrongForeignKey {
            get {
                return ResourceManager.GetString("NavigationForWrongForeignKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property &apos;{property}&apos; on entity type &apos;{entityType}&apos; is being accessed using the &apos;{ReferenceMethod}&apos; or &apos;{CollectionMethod}&apos; method, but is defined in the model as a non-navigation property. Use the &apos;{PropertyMethod}&apos; method to access non-navigation properties..
        /// </summary>
        internal static string NavigationIsProperty {
            get {
                return ResourceManager.GetString("NavigationIsProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The navigation property &apos;{navigation}&apos; on the entity type &apos;{entityType}&apos; does not have a setter and no writable backing field was found or specified. Read-only collection navigation properties must be initialized before use..
        /// </summary>
        internal static string NavigationNoSetter {
            get {
                return ResourceManager.GetString("NavigationNoSetter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to determine the relationship represented by navigation property &apos;{entityType}.{navigation}&apos; of type &apos;{propertyType}&apos;. Either manually configure the relationship, or ignore this property from the model..
        /// </summary>
        internal static string NavigationNotAdded {
            get {
                return ResourceManager.GetString("NavigationNotAdded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The navigation property &apos;{navigation}&apos; cannot be added to the entity type &apos;{entityType}&apos; because its CLR type &apos;{clrType}&apos; does not match the expected CLR type &apos;{targetType}&apos;..
        /// </summary>
        internal static string NavigationSingleWrongClrType {
            get {
                return ResourceManager.GetString("NavigationSingleWrongClrType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The navigation property &apos;{navigation}&apos; cannot be added to the entity type &apos;{entityType}&apos; because the target entity type &apos;{targetType}&apos; is defined in shadow state and navigations properties cannot point to shadow state entities..
        /// </summary>
        internal static string NavigationToShadowEntity {
            get {
                return ResourceManager.GetString("NavigationToShadowEntity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No field was found backing property &apos;{property}&apos; of entity type &apos;{entity}&apos;. Either configure a backing field or use a different &apos;{pam}&apos;..
        /// </summary>
        internal static string NoBackingField {
            get {
                return ResourceManager.GetString("NoBackingField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The navigation property &apos;{navigation}&apos; cannot be added to the entity type &apos;{entityType}&apos; because there is no corresponding CLR property on the underlying type and navigations properties cannot be added to shadow state..
        /// </summary>
        internal static string NoClrNavigation {
            get {
                return ResourceManager.GetString("NoClrNavigation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property &apos;{property}&apos; cannot be added to entity type &apos;{entityType}&apos; because the property is not marked as shadow state and no corresponding CLR property exists on the underlying type..
        /// </summary>
        internal static string NoClrProperty {
            get {
                return ResourceManager.GetString("NoClrProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CLR entity materializer cannot be used for entity type &apos;{entityType}&apos; because it is a shadow state entity type.  Materialization to a CLR type is only possible for entity types that have a corresponding CLR type..
        /// </summary>
        internal static string NoClrType {
            get {
                return ResourceManager.GetString("NoClrType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Entity Framework services have not been added to the internal service provider. Either remove the call to UseInternalServiceProvider so that EF will manage its own internal services, or use the method from your database provider to add the required services to the service provider (e.g. AddEntityFrameworkMongoDb)..
        /// </summary>
        internal static string NoEfServices {
            get {
                return ResourceManager.GetString("NoEfServices", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sequence contains no elements.
        /// </summary>
        internal static string NoElements {
            get {
                return ResourceManager.GetString("NoElements", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No backing field could be found for property &apos;{property}&apos; of entity type &apos;{entity}&apos; and the property does not have a getter..
        /// </summary>
        internal static string NoFieldOrGetter {
            get {
                return ResourceManager.GetString("NoFieldOrGetter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No backing field could be found for property &apos;{property}&apos; of entity type &apos;{entity}&apos; and the property does not have a setter..
        /// </summary>
        internal static string NoFieldOrSetter {
            get {
                return ResourceManager.GetString("NoFieldOrSetter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property &apos;{property}&apos; of entity type &apos;{entity}&apos; does not have a getter. Either make the property readable or use a different &apos;{pam}&apos;..
        /// </summary>
        internal static string NoGetter {
            get {
                return ResourceManager.GetString("NoGetter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The entity type &apos;{entityType}&apos; cannot inherit from &apos;{baseEntityType}&apos; because &apos;{baseEntityType}&apos; is a shadow state entity type while &apos;{entityType}&apos; is not..
        /// </summary>
        internal static string NonClrBaseType {
            get {
                return ResourceManager.GetString("NonClrBaseType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The DbContextOptions passed to the {contextType} constructor must be a DbContextOptions&lt;{contextType}&gt;. When registering multiple DbContext types make sure that the constructor for each context type has a DbContextOptions&lt;TContext&gt; parameter rather than a non-generic DbContextOptions parameter..
        /// </summary>
        internal static string NonGenericOptions {
            get {
                return ResourceManager.GetString("NonGenericOptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The collection type being used for navigation property &apos;{navigation}&apos; on entity type &apos;{entityType}&apos; does not implement &apos;INotifyCollectionChanged&apos;. Any entity type configured to use the &apos;{changeTrackingStrategy}&apos; change tracking strategy must use collections that implement &apos;INotifyCollectionChanged&apos;. Consider using &apos;ObservableCollection&lt;T&gt;&apos; for this..
        /// </summary>
        internal static string NonNotifyingCollection {
            get {
                return ResourceManager.GetString("NonNotifyingCollection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The entity type &apos;{entityType}&apos; cannot inherit from &apos;{baseEntityType}&apos; because &apos;{entityType}&apos; is a shadow state entity type while &apos;{baseEntityType}&apos; is not..
        /// </summary>
        internal static string NonShadowBaseType {
            get {
                return ResourceManager.GetString("NonShadowBaseType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A parameterless constructor was not found on entity type &apos;{entityType}&apos;. In order to create an instance of &apos;{entityType}&apos; EF requires that a parameterless constructor be declared..
        /// </summary>
        internal static string NoParameterlessConstructor {
            get {
                return ResourceManager.GetString("NoParameterlessConstructor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No property was associated with field &apos;{field}&apos; of entity type &apos;{entity}&apos;. Either configure a property or use a different &apos;{pam}&apos;..
        /// </summary>
        internal static string NoProperty {
            get {
                return ResourceManager.GetString("NoProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property &apos;{property}&apos; cannot be added to the entity type &apos;{entityType}&apos; because there was no property type specified and there is no corresponding CLR property. To add a shadow state property the property type needs to be specified..
        /// </summary>
        internal static string NoPropertyType {
            get {
                return ResourceManager.GetString("NoPropertyType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No database provider has been configured for this DbContext. A provider can be configured by overriding the DbContext.OnConfiguring method or by using AddDbContext on the application service provider. If AddDbContext is used, then also ensure that your DbContext type accepts a DbContextOptions&lt;TContext&gt; object in its constructor and passes it to the base constructor for DbContext..
        /// </summary>
        internal static string NoProviderConfigured {
            get {
                return ResourceManager.GetString("NoProviderConfigured", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to resolve service for type &apos;{service}&apos;. This is often because no database provider has been configured for this DbContext. A provider can be configured by overriding the DbContext.OnConfiguring method or by using AddDbContext on the application service provider. If AddDbContext is used, then also ensure that your DbContext type accepts a DbContextOptions&lt;TContext&gt; object in its constructor and passes it to the base constructor for DbContext..
        /// </summary>
        internal static string NoProviderConfiguredFailedToResolveService {
            get {
                return ResourceManager.GetString("NoProviderConfiguredFailedToResolveService", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property &apos;{property}&apos; of entity type &apos;{entity}&apos; does not have a setter. Either make the property writable or use a different &apos;{pam}&apos;..
        /// </summary>
        internal static string NoSetter {
            get {
                return ResourceManager.GetString("NoSetter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The entity type &apos;{entityType}&apos; cannot inherit from &apos;{baseEntityType}&apos; because &apos;{clrType}&apos; is not a descendent of &apos;{baseClrType}&apos;..
        /// </summary>
        internal static string NotAssignableClrBaseType {
            get {
                return ResourceManager.GetString("NotAssignableClrBaseType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{property}&apos; on entity type &apos;{entityType}&apos; does not have a value set and no value generator is available for properties of type &apos;{propertyType}&apos;. Either set a value for the property before adding the entity or configure a value generator for properties of type &apos;{propertyType}&apos;..
        /// </summary>
        internal static string NoValueGenerator {
            get {
                return ResourceManager.GetString("NoValueGenerator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A key on entity type &apos;{entityType}&apos; cannot contain the property &apos;{property}&apos; because it is nullable/optional. All properties on which a key is declared must be marked as non-nullable/required..
        /// </summary>
        internal static string NullableKey {
            get {
                return ResourceManager.GetString("NullableKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot change ObservableHashSet during a CollectionChanged event..
        /// </summary>
        internal static string ObservableCollectionReentrancy {
            get {
                return ResourceManager.GetString("ObservableCollectionReentrancy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Options extension of type &apos;{optionsExtension}&apos; not found..
        /// </summary>
        internal static string OptionsExtensionNotFound {
            get {
                return ResourceManager.GetString("OptionsExtensionNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The original value for property &apos;{property}&apos; of entity type &apos;{entityType}&apos; cannot be accessed because it is not being tracked. Original values are not recorded for most properties of entities when the &apos;ChangingAndChangedNotifications&apos; strategy is used. To access all original values use a different change tracking strategy such as &apos;ChangingAndChangedNotificationsWithOriginalValues&apos;..
        /// </summary>
        internal static string OriginalValueNotTracked {
            get {
                return ResourceManager.GetString("OriginalValueNotTracked", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You are configuring a relationship between &apos;{dependentEntityType}&apos; and &apos;{principalEntityType}&apos; but have specified a foreign key targeting &apos;{entityType}&apos;. The foreign key must be targeting a type that is part of the relationship..
        /// </summary>
        internal static string PrincipalEntityTypeNotInRelationship {
            get {
                return ResourceManager.GetString("PrincipalEntityTypeNotInRelationship", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property &apos;{property}&apos; on entity type &apos;{entityType}&apos; is marked as null, but this cannot be saved because the property is marked as required..
        /// </summary>
        internal static string PropertyConceptualNull {
            get {
                return ResourceManager.GetString("PropertyConceptualNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property &apos;{property}&apos; belongs to entity type &apos;{entityType}&apos; but is being used with an instance of entity type &apos;{expectedType}&apos;..
        /// </summary>
        internal static string PropertyDoesNotBelong {
            get {
                return ResourceManager.GetString("PropertyDoesNotBelong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property &apos;{property}&apos; cannot be removed from entity type &apos;{entityType}&apos; because it is being used in an index or key. All indexes and keys must be removed or redefined before the property can be removed..
        /// </summary>
        internal static string PropertyInUse {
            get {
                return ResourceManager.GetString("PropertyInUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property &apos;{property}&apos; on entity type &apos;{entityType}&apos; is being accessed using the &apos;{PropertyMethod}&apos; method, but is defined in the model as a navigation property. Use either the &apos;{ReferenceMethod}&apos; or &apos;{CollectionMethod}&apos; method to access navigation properties..
        /// </summary>
        internal static string PropertyIsNavigation {
            get {
                return ResourceManager.GetString("PropertyIsNavigation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The EF.Property&lt;T&gt; method may only be used within LINQ queries..
        /// </summary>
        internal static string PropertyMethodInvoked {
            get {
                return ResourceManager.GetString("PropertyMethodInvoked", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property &apos;{entityType}.{property}&apos; could not be mapped, because it is of type &apos;{propertyType}&apos; which is not a supported primitive type or a valid entity type. Either explicitly map this property, or ignore it..
        /// </summary>
        internal static string PropertyNotAdded {
            get {
                return ResourceManager.GetString("PropertyNotAdded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property &apos;{property}&apos; on entity type &apos;{entityType}&apos; could not be found. Ensure that the property exists and has been included in the model..
        /// </summary>
        internal static string PropertyNotFound {
            get {
                return ResourceManager.GetString("PropertyNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property &apos;{entityType}.{property}&apos; is of type &apos;{propertyType}&apos; which is not supported by current database provider. Either change the property CLR type or manually configure the database type for it..
        /// </summary>
        internal static string PropertyNotMapped {
            get {
                return ResourceManager.GetString("PropertyNotMapped", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property &apos;{property}&apos; on entity type &apos;{entityType}&apos; is defined to be read-only after it has been saved, but its value has been modified or marked as modified..
        /// </summary>
        internal static string PropertyReadOnlyAfterSave {
            get {
                return ResourceManager.GetString("PropertyReadOnlyAfterSave", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property &apos;{property}&apos; on entity type &apos;{entityType}&apos; is defined to be read-only before it is saved, but its value has been set to something other than a temporary or default value..
        /// </summary>
        internal static string PropertyReadOnlyBeforeSave {
            get {
                return ResourceManager.GetString("PropertyReadOnlyBeforeSave", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property &apos;{property}&apos; cannot be added to entity type &apos;{entityType}&apos; because the property is not in shadow state and the type of the corresponding CLR property &apos;{clrType}&apos; does not match the specified type &apos;{propertyType}&apos;..
        /// </summary>
        internal static string PropertyWrongClrType {
            get {
                return ResourceManager.GetString("PropertyWrongClrType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CLR property &apos;{property}&apos; cannot be added to entity type &apos;{entityType}&apos; because it is declared on the CLR type &apos;{clrType}&apos;..
        /// </summary>
        internal static string PropertyWrongEntityClrType {
            get {
                return ResourceManager.GetString("PropertyWrongEntityClrType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Field &apos;{field}&apos; of entity type &apos;{entity}&apos; is readonly and so cannot be set..
        /// </summary>
        internal static string ReadonlyField {
            get {
                return ResourceManager.GetString("ReadonlyField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to use the context while it is being configured. A DbContext instance cannot be used inside OnConfiguring since it is still being configured at this point..
        /// </summary>
        internal static string RecursiveOnConfiguring {
            get {
                return ResourceManager.GetString("RecursiveOnConfiguring", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt was made to use the model while it was being created. A DbContext instance cannot be used inside OnModelCreating in any way that makes use of the model that is being created..
        /// </summary>
        internal static string RecursiveOnModelCreating {
            get {
                return ResourceManager.GetString("RecursiveOnModelCreating", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The relationship from &apos;{referencingEntityTypeOrNavigation}&apos; to &apos;{referencedEntityTypeOrNavigation}&apos; with foreign key properties {foreignKeyPropertiesWithTypes} cannot target the primary key {primaryKeyPropertiesWithTypes} because it is not compatible. Configure a principal key or a set of compatible foreign key properties for this relationship..
        /// </summary>
        internal static string ReferencedShadowKey {
            get {
                return ResourceManager.GetString("ReferencedShadowKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property &apos;{property}&apos; on entity type &apos;{entityType}&apos; is being accessed using the &apos;{ReferenceMethod}&apos; method, but is defined in the model as a collection navigation property. Use the &apos;{CollectionMethod}&apos; method to access collection navigation properties..
        /// </summary>
        internal static string ReferenceIsCollection {
            get {
                return ResourceManager.GetString("ReferenceIsCollection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Navigation property &apos;{navigation}&apos; on entity type &apos;{entityType}&apos; cannot have &apos;IsLoaded&apos; set to false because the referenced entity is non-null and therefore is loaded..
        /// </summary>
        internal static string ReferenceMustBeLoaded {
            get {
                return ResourceManager.GetString("ReferenceMustBeLoaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The principal and dependent ends of the relationship cannot be flipped once foreign key or principal key properties have been specified..
        /// </summary>
        internal static string RelationshipCannotBeInverted {
            get {
                return ResourceManager.GetString("RelationshipCannotBeInverted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The association between entity types &apos;{firstType}&apos; and &apos;{secondType}&apos; has been severed but the foreign key for this relationship cannot be set to null. If the dependent entity should be deleted, then setup the relationship to use cascade deletes..
        /// </summary>
        internal static string RelationshipConceptualNull {
            get {
                return ResourceManager.GetString("RelationshipConceptualNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;ObservableCollection&lt;T&gt;.Clear()&apos; is not supported because it uses the &apos;INotifyCollectionChanged&apos; &apos;Reset&apos; operation, which does not supply the items removed. Either use multiple calls to &apos;Remove&apos; or use a notifying collection that supports &apos;Clear&apos;, such as &apos;Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet&lt;T&gt;&apos;..
        /// </summary>
        internal static string ResetNotSupported {
            get {
                return ResourceManager.GetString("ResetNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A relationship cannot be established from property &apos;{property}&apos; on type &apos;{entityType}&apos; to property &apos;{referencedProperty}&apos; on type &apos;{referencedEntityType}&apos;. Check the values in the InversePropertyAttribute to ensure relationship definitions are unique and reference from one navigation property to its corresponding inverse navigation property..
        /// </summary>
        internal static string SelfReferencingNavigationWithInverseProperty {
            get {
                return ResourceManager.GetString("SelfReferencingNavigationWithInverseProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data, this mode should only be enabled during development..
        /// </summary>
        internal static string SensitiveDataLoggingEnabled {
            get {
                return ResourceManager.GetString("SensitiveDataLoggingEnabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Entity type &apos;{entityType}&apos; is in shadow-state. A valid model requires all entity types to have corresponding CLR type..
        /// </summary>
        internal static string ShadowEntity {
            get {
                return ResourceManager.GetString("ShadowEntity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The key {key} on entity type &apos;{entityType}&apos; contains properties in shadow state - {shadowProperties}..
        /// </summary>
        internal static string ShadowKey {
            get {
                return ResourceManager.GetString("ShadowKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property &apos;{property}&apos; on entity type &apos;{entityType}&apos; has a temporary value. Either set a permanent value explicitly or ensure that the database is configured to generate values for this property..
        /// </summary>
        internal static string TempValue {
            get {
                return ResourceManager.GetString("TempValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property &apos;{property}&apos; on entity type &apos;{entityType}&apos; has a temporary value while attempting to change the entity&apos;s state to &apos;{state}&apos;. Either set a permanent value explicitly or ensure that the database is configured to generate values for this property..
        /// </summary>
        internal static string TempValuePersists {
            get {
                return ResourceManager.GetString("TempValuePersists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unhandled expression type: {expressionType}.
        /// </summary>
        internal static string UnhandledExpressionType {
            get {
                return ResourceManager.GetString("UnhandledExpressionType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unhandled node type: {nodeType}.
        /// </summary>
        internal static string UnhandledNodeType {
            get {
                return ResourceManager.GetString("UnhandledNodeType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value for property &apos;{property}&apos; of entity type &apos;{entityType}&apos; cannot be set to null because its type is &apos;{propertyType}&apos; which is not a nullable type..
        /// </summary>
        internal static string ValueCannotBeNull {
            get {
                return ResourceManager.GetString("ValueCannotBeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Warning as error exception for warning &apos;{eventId}&apos;: {message} To suppress this Exception use the DbContextOptionsBuilder.ConfigureWarnings API. ConfigureWarnings can be used when overriding the DbContext.OnConfiguring method or using AddDbContext on the application service provider..
        /// </summary>
        internal static string WarningAsErrorTemplate {
            get {
                return ResourceManager.GetString("WarningAsErrorTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {message} To configure this warning use the DbContextOptionsBuilder.ConfigureWarnings API (event id &apos;{eventId}&apos;). ConfigureWarnings can be used when overriding the DbContext.OnConfiguring method or using AddDbContext on the application service provider..
        /// </summary>
        internal static string WarningLogTemplate {
            get {
                return ResourceManager.GetString("WarningLogTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property &apos;{property}&apos; on entity type &apos;{entityType}&apos; is of type &apos;{actualType}&apos; but the generic type provided is of type &apos;{genericType}&apos;..
        /// </summary>
        internal static string WrongGenericPropertyType {
            get {
                return ResourceManager.GetString("WrongGenericPropertyType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot start tracking InternalEntityEntry for entity type &apos;{entityType}&apos; because it was created by a different StateManager instance..
        /// </summary>
        internal static string WrongStateManager {
            get {
                return ResourceManager.GetString("WrongStateManager", resourceCulture);
            }
        }
    }
}
